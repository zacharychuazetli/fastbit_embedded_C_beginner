
011KeyPadInterfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001078  08001078  00002078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010b8  080010b8  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  080010b8  080010b8  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010b8  080010b8  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010b8  080010b8  000020b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010bc  080010bc  000020bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080010c0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ed4  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000036c  00000000  00000000  00003f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  000042d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  000043f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b94  00000000  00000000  000044b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000155c  00000000  00000000  00007049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000099c3  00000000  00000000  000085a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011f68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009fc  00000000  00000000  00011fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000129a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001060 	.word	0x08001060

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08001060 	.word	0x08001060

080001c8 <delay>:

#include<stdio.h>
#include "main.h"

void delay(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for(uint32_t i =0 ; i < 300000 ; i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delay+0xc>

}
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	000493df 	.word	0x000493df

080001f4 <main>:

int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
	uint32_t volatile *const pInPutDataReg  =  (uint32_t*)(0x40020C00+0x10);
	uint32_t volatile *const pOutPutDataReg =  (uint32_t*)(0x40020C00+0x14);
	uint32_t volatile *const pClockCtrlReg  =  (uint32_t*)(0x40023800+0x30);
	uint32_t volatile *const pPullupDownReg =  (uint32_t*)(0x40020C00 + 0x0C); */

	RCC_AHB1ENR_t volatile *const pClockCtrlReg   = (RCC_AHB1ENR_t*)(0x40023800 + 0x30);
 80001fa:	4ba0      	ldr	r3, [pc, #640]	@ (800047c <main+0x288>)
 80001fc:	617b      	str	r3, [r7, #20]
	GPIOx_MODER_t volatile *const pGPIODModeReg  =  (GPIOx_MODER_t*)(0x40020C00);
 80001fe:	4ba0      	ldr	r3, [pc, #640]	@ (8000480 <main+0x28c>)
 8000200:	613b      	str	r3, [r7, #16]
	GPIOx_ODR_t volatile *const pOutPutDataReg =  (GPIOx_ODR_t*)(0x40020C00 + 0x14);
 8000202:	4ba0      	ldr	r3, [pc, #640]	@ (8000484 <main+0x290>)
 8000204:	60fb      	str	r3, [r7, #12]
	GPIOx_IDR_t volatile *const pInPutDataReg  =  (GPIOx_IDR_t*)(0x40020C00 + 0x10);
 8000206:	4ba0      	ldr	r3, [pc, #640]	@ (8000488 <main+0x294>)
 8000208:	60bb      	str	r3, [r7, #8]
	GPIOx_PUPDR	volatile *const pPullUpDownReg  =  (GPIOx_PUPDR*)(0x40020C00 + 0x0C);
 800020a:	4ba0      	ldr	r3, [pc, #640]	@ (800048c <main+0x298>)
 800020c:	607b      	str	r3, [r7, #4]

	//1.Enable the peripheral clock of GPIOD peripheral
	pClockCtrlReg -> gpiod_en = 1;
 800020e:	697a      	ldr	r2, [r7, #20]
 8000210:	6813      	ldr	r3, [r2, #0]
 8000212:	f043 0308 	orr.w	r3, r3, #8
 8000216:	6013      	str	r3, [r2, #0]

    // 2.configure PD0,PD1,PD2,PD3 as output (rows)
	// clear
	pGPIODModeReg -> pin_0 = 1;
 8000218:	693a      	ldr	r2, [r7, #16]
 800021a:	6813      	ldr	r3, [r2, #0]
 800021c:	2101      	movs	r1, #1
 800021e:	f361 0301 	bfi	r3, r1, #0, #2
 8000222:	6013      	str	r3, [r2, #0]
	pGPIODModeReg -> pin_1 = 1;
 8000224:	693a      	ldr	r2, [r7, #16]
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	2101      	movs	r1, #1
 800022a:	f361 0383 	bfi	r3, r1, #2, #2
 800022e:	6013      	str	r3, [r2, #0]
	pGPIODModeReg -> pin_2 = 1;
 8000230:	693a      	ldr	r2, [r7, #16]
 8000232:	6813      	ldr	r3, [r2, #0]
 8000234:	2101      	movs	r1, #1
 8000236:	f361 1305 	bfi	r3, r1, #4, #2
 800023a:	6013      	str	r3, [r2, #0]
	pGPIODModeReg -> pin_3 = 1;
 800023c:	693a      	ldr	r2, [r7, #16]
 800023e:	6813      	ldr	r3, [r2, #0]
 8000240:	2101      	movs	r1, #1
 8000242:	f361 1387 	bfi	r3, r1, #6, #2
 8000246:	6013      	str	r3, [r2, #0]

	// 3. configure PD8 , PD9, PD10, PD11 as input (columns)
	pGPIODModeReg -> pin_8 = 0;
 8000248:	693a      	ldr	r2, [r7, #16]
 800024a:	6813      	ldr	r3, [r2, #0]
 800024c:	f36f 4311 	bfc	r3, #16, #2
 8000250:	6013      	str	r3, [r2, #0]
	pGPIODModeReg -> pin_9 = 0;
 8000252:	693a      	ldr	r2, [r7, #16]
 8000254:	6813      	ldr	r3, [r2, #0]
 8000256:	f36f 4393 	bfc	r3, #18, #2
 800025a:	6013      	str	r3, [r2, #0]
	pGPIODModeReg -> pin_10 = 0;
 800025c:	693a      	ldr	r2, [r7, #16]
 800025e:	6813      	ldr	r3, [r2, #0]
 8000260:	f36f 5315 	bfc	r3, #20, #2
 8000264:	6013      	str	r3, [r2, #0]
	pGPIODModeReg -> pin_11 = 0;
 8000266:	693a      	ldr	r2, [r7, #16]
 8000268:	6813      	ldr	r3, [r2, #0]
 800026a:	f36f 5397 	bfc	r3, #22, #2
 800026e:	6013      	str	r3, [r2, #0]

	// 4.Enable internal pull-up resistors for PD8 PD9 PD10 PD11
    pPullUpDownReg -> pin_8 = 1;
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	6813      	ldr	r3, [r2, #0]
 8000274:	2101      	movs	r1, #1
 8000276:	f361 4311 	bfi	r3, r1, #16, #2
 800027a:	6013      	str	r3, [r2, #0]
    pPullUpDownReg -> pin_9 = 1;
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	6813      	ldr	r3, [r2, #0]
 8000280:	2101      	movs	r1, #1
 8000282:	f361 4393 	bfi	r3, r1, #18, #2
 8000286:	6013      	str	r3, [r2, #0]
    pPullUpDownReg -> pin_10 = 1;
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	2101      	movs	r1, #1
 800028e:	f361 5315 	bfi	r3, r1, #20, #2
 8000292:	6013      	str	r3, [r2, #0]
    pPullUpDownReg -> pin_11 = 1;
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	6813      	ldr	r3, [r2, #0]
 8000298:	2101      	movs	r1, #1
 800029a:	f361 5397 	bfi	r3, r1, #22, #2
 800029e:	6013      	str	r3, [r2, #0]

while(1)
{
	//////////////////////////////////////////////
	pOutPutDataReg -> pin_0 = 0;
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	6813      	ldr	r3, [r2, #0]
 80002a4:	f36f 0300 	bfc	r3, #0, #1
 80002a8:	6013      	str	r3, [r2, #0]
    pOutPutDataReg -> pin_1 = 1;
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	6813      	ldr	r3, [r2, #0]
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	6013      	str	r3, [r2, #0]
    pOutPutDataReg -> pin_2 = 1;
 80002b4:	68fa      	ldr	r2, [r7, #12]
 80002b6:	6813      	ldr	r3, [r2, #0]
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	6013      	str	r3, [r2, #0]
    pOutPutDataReg -> pin_3 = 1;
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	6813      	ldr	r3, [r2, #0]
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6013      	str	r3, [r2, #0]

    //scan the columns
    //check C1(PD8) low or high
    if(!(pInPutDataReg -> pin_8))
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d104      	bne.n	80002e0 <main+0xec>
    {
    	//key is pressed
    	delay();
 80002d6:	f7ff ff77 	bl	80001c8 <delay>
    	printf("1\n");
 80002da:	486d      	ldr	r0, [pc, #436]	@ (8000490 <main+0x29c>)
 80002dc:	f000 fb2c 	bl	8000938 <puts>
    }

    //check C2(PD9) low or high
    if(!(pInPutDataReg -> pin_9))
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d104      	bne.n	80002f8 <main+0x104>
    {
    	//key is pressed
    	delay();
 80002ee:	f7ff ff6b 	bl	80001c8 <delay>
    	printf("2\n");
 80002f2:	4868      	ldr	r0, [pc, #416]	@ (8000494 <main+0x2a0>)
 80002f4:	f000 fb20 	bl	8000938 <puts>
    }

    //check C3(PD10) low or high
    if(!(pInPutDataReg -> pin_10))
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2b00      	cmp	r3, #0
 8000304:	d104      	bne.n	8000310 <main+0x11c>
    {
    	//key is pressed
    	delay();
 8000306:	f7ff ff5f 	bl	80001c8 <delay>
    	printf("3\n");
 800030a:	4863      	ldr	r0, [pc, #396]	@ (8000498 <main+0x2a4>)
 800030c:	f000 fb14 	bl	8000938 <puts>
    }

    //check C4(PD11) low or high
    if(!(pInPutDataReg -> pin_11))
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8000318:	b2db      	uxtb	r3, r3
 800031a:	2b00      	cmp	r3, #0
 800031c:	d104      	bne.n	8000328 <main+0x134>
    {
    	//key is pressed
    	delay();
 800031e:	f7ff ff53 	bl	80001c8 <delay>
    	printf("A\n");
 8000322:	485e      	ldr	r0, [pc, #376]	@ (800049c <main+0x2a8>)
 8000324:	f000 fb08 	bl	8000938 <puts>
    }

    //////////////////////////////////////////////
    pOutPutDataReg -> pin_0 = 1;
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	6813      	ldr	r3, [r2, #0]
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]
	pOutPutDataReg -> pin_1 = 0;
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	6813      	ldr	r3, [r2, #0]
 8000336:	f36f 0341 	bfc	r3, #1, #1
 800033a:	6013      	str	r3, [r2, #0]
	pOutPutDataReg -> pin_2 = 1;
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	6813      	ldr	r3, [r2, #0]
 8000340:	f043 0304 	orr.w	r3, r3, #4
 8000344:	6013      	str	r3, [r2, #0]
	pOutPutDataReg -> pin_3 = 1;
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	6813      	ldr	r3, [r2, #0]
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6013      	str	r3, [r2, #0]

	//scan the columns
	//check C1(PD8) low or high
	if(!(pInPutDataReg -> pin_8))
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d104      	bne.n	8000368 <main+0x174>
	{
		//key is pressed
		delay();
 800035e:	f7ff ff33 	bl	80001c8 <delay>
		printf("4\n");
 8000362:	484f      	ldr	r0, [pc, #316]	@ (80004a0 <main+0x2ac>)
 8000364:	f000 fae8 	bl	8000938 <puts>
	}

	//check C2(PD9) low or high
	if(!(pInPutDataReg -> pin_9))
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	2b00      	cmp	r3, #0
 8000374:	d104      	bne.n	8000380 <main+0x18c>
	{
		//key is pressed
		delay();
 8000376:	f7ff ff27 	bl	80001c8 <delay>
		printf("5\n");
 800037a:	484a      	ldr	r0, [pc, #296]	@ (80004a4 <main+0x2b0>)
 800037c:	f000 fadc 	bl	8000938 <puts>
	}

	//check C3(PD10) low or high
	if(!(pInPutDataReg -> pin_10))
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2b00      	cmp	r3, #0
 800038c:	d104      	bne.n	8000398 <main+0x1a4>
	{
		//key is pressed
		delay();
 800038e:	f7ff ff1b 	bl	80001c8 <delay>
		printf("6\n");
 8000392:	4845      	ldr	r0, [pc, #276]	@ (80004a8 <main+0x2b4>)
 8000394:	f000 fad0 	bl	8000938 <puts>
	}

	//check C4(PD11) low or high
	if(!(pInPutDataReg -> pin_11))
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d104      	bne.n	80003b0 <main+0x1bc>
	{
		//key is pressed
		delay();
 80003a6:	f7ff ff0f 	bl	80001c8 <delay>
		printf("B\n");
 80003aa:	4840      	ldr	r0, [pc, #256]	@ (80004ac <main+0x2b8>)
 80003ac:	f000 fac4 	bl	8000938 <puts>
	}

	//////////////////////////////////////////////
	pOutPutDataReg -> pin_0 = 1;
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	6813      	ldr	r3, [r2, #0]
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6013      	str	r3, [r2, #0]
	pOutPutDataReg -> pin_1 = 1;
 80003ba:	68fa      	ldr	r2, [r7, #12]
 80003bc:	6813      	ldr	r3, [r2, #0]
 80003be:	f043 0302 	orr.w	r3, r3, #2
 80003c2:	6013      	str	r3, [r2, #0]
	pOutPutDataReg -> pin_2 = 0;
 80003c4:	68fa      	ldr	r2, [r7, #12]
 80003c6:	6813      	ldr	r3, [r2, #0]
 80003c8:	f36f 0382 	bfc	r3, #2, #1
 80003cc:	6013      	str	r3, [r2, #0]
	pOutPutDataReg -> pin_3 = 1;
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	6813      	ldr	r3, [r2, #0]
 80003d2:	f043 0308 	orr.w	r3, r3, #8
 80003d6:	6013      	str	r3, [r2, #0]

	//scan the columns
	//check C1(PD8) low or high
	if(!(pInPutDataReg -> pin_8))
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d104      	bne.n	80003f0 <main+0x1fc>
	{
		//key is pressed
		delay();
 80003e6:	f7ff feef 	bl	80001c8 <delay>
		printf("7\n");
 80003ea:	4831      	ldr	r0, [pc, #196]	@ (80004b0 <main+0x2bc>)
 80003ec:	f000 faa4 	bl	8000938 <puts>
	}

	//check C2(PD9) low or high
	if(!(pInPutDataReg -> pin_9))
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d104      	bne.n	8000408 <main+0x214>
	{
		//key is pressed
		delay();
 80003fe:	f7ff fee3 	bl	80001c8 <delay>
		printf("8\n");
 8000402:	482c      	ldr	r0, [pc, #176]	@ (80004b4 <main+0x2c0>)
 8000404:	f000 fa98 	bl	8000938 <puts>
	}

	//check C3(PD10) low or high
	if(!(pInPutDataReg -> pin_10))
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b00      	cmp	r3, #0
 8000414:	d104      	bne.n	8000420 <main+0x22c>
	{
		//key is pressed
		delay();
 8000416:	f7ff fed7 	bl	80001c8 <delay>
		printf("9\n");
 800041a:	4827      	ldr	r0, [pc, #156]	@ (80004b8 <main+0x2c4>)
 800041c:	f000 fa8c 	bl	8000938 <puts>
	}

	//check C4(PD11) low or high
	if(!(pInPutDataReg -> pin_11))
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8000428:	b2db      	uxtb	r3, r3
 800042a:	2b00      	cmp	r3, #0
 800042c:	d104      	bne.n	8000438 <main+0x244>
	{
		//key is pressed
		delay();
 800042e:	f7ff fecb 	bl	80001c8 <delay>
		printf("C\n");
 8000432:	4822      	ldr	r0, [pc, #136]	@ (80004bc <main+0x2c8>)
 8000434:	f000 fa80 	bl	8000938 <puts>
	}

	//////////////////////////////////////////////
	pOutPutDataReg -> pin_0 = 1;
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	6813      	ldr	r3, [r2, #0]
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6013      	str	r3, [r2, #0]
	pOutPutDataReg -> pin_1 = 1;
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	6813      	ldr	r3, [r2, #0]
 8000446:	f043 0302 	orr.w	r3, r3, #2
 800044a:	6013      	str	r3, [r2, #0]
	pOutPutDataReg -> pin_2 = 1;
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	6813      	ldr	r3, [r2, #0]
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	6013      	str	r3, [r2, #0]
	pOutPutDataReg -> pin_3 = 0;
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	6813      	ldr	r3, [r2, #0]
 800045a:	f36f 03c3 	bfc	r3, #3, #1
 800045e:	6013      	str	r3, [r2, #0]

	//scan the columns
	//check C1(PD8) low or high
	if(!(pInPutDataReg -> pin_8))
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8000468:	b2db      	uxtb	r3, r3
 800046a:	2b00      	cmp	r3, #0
 800046c:	d12a      	bne.n	80004c4 <main+0x2d0>
	{
		//key is pressed
		delay();
 800046e:	f7ff feab 	bl	80001c8 <delay>
		printf("*\n");
 8000472:	4813      	ldr	r0, [pc, #76]	@ (80004c0 <main+0x2cc>)
 8000474:	f000 fa60 	bl	8000938 <puts>
 8000478:	e024      	b.n	80004c4 <main+0x2d0>
 800047a:	bf00      	nop
 800047c:	40023830 	.word	0x40023830
 8000480:	40020c00 	.word	0x40020c00
 8000484:	40020c14 	.word	0x40020c14
 8000488:	40020c10 	.word	0x40020c10
 800048c:	40020c0c 	.word	0x40020c0c
 8000490:	08001078 	.word	0x08001078
 8000494:	0800107c 	.word	0x0800107c
 8000498:	08001080 	.word	0x08001080
 800049c:	08001084 	.word	0x08001084
 80004a0:	08001088 	.word	0x08001088
 80004a4:	0800108c 	.word	0x0800108c
 80004a8:	08001090 	.word	0x08001090
 80004ac:	08001094 	.word	0x08001094
 80004b0:	08001098 	.word	0x08001098
 80004b4:	0800109c 	.word	0x0800109c
 80004b8:	080010a0 	.word	0x080010a0
 80004bc:	080010a4 	.word	0x080010a4
 80004c0:	080010a8 	.word	0x080010a8
	}

	//check C2(PD9) low or high
	if(!(pInPutDataReg -> pin_9))
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d104      	bne.n	80004dc <main+0x2e8>
	{
		//key is pressed
		delay();
 80004d2:	f7ff fe79 	bl	80001c8 <delay>
		printf("0\n");
 80004d6:	480e      	ldr	r0, [pc, #56]	@ (8000510 <main+0x31c>)
 80004d8:	f000 fa2e 	bl	8000938 <puts>
	}

	//check C3(PD10) low or high
	if(!(pInPutDataReg -> pin_10))
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d104      	bne.n	80004f4 <main+0x300>
	{
		//key is pressed
		delay();
 80004ea:	f7ff fe6d 	bl	80001c8 <delay>
		printf("#\n");
 80004ee:	4809      	ldr	r0, [pc, #36]	@ (8000514 <main+0x320>)
 80004f0:	f000 fa22 	bl	8000938 <puts>
	}

	//check C4(PD11) low or high
	if(!(pInPutDataReg -> pin_11))
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	f47f aece 	bne.w	80002a0 <main+0xac>
	{
		//key is pressed
		delay();
 8000504:	f7ff fe60 	bl	80001c8 <delay>
		printf("D\n");
 8000508:	4803      	ldr	r0, [pc, #12]	@ (8000518 <main+0x324>)
 800050a:	f000 fa15 	bl	8000938 <puts>
	pOutPutDataReg -> pin_0 = 0;
 800050e:	e6c7      	b.n	80002a0 <main+0xac>
 8000510:	080010ac 	.word	0x080010ac
 8000514:	080010b0 	.word	0x080010b0
 8000518:	080010b4 	.word	0x080010b4

0800051c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000526:	4b0f      	ldr	r3, [pc, #60]	@ (8000564 <ITM_SendChar+0x48>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a0e      	ldr	r2, [pc, #56]	@ (8000564 <ITM_SendChar+0x48>)
 800052c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000530:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <ITM_SendChar+0x4c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <ITM_SendChar+0x4c>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800053e:	bf00      	nop
 8000540:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0f8      	beq.n	8000540 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800054e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	6013      	str	r3, [r2, #0]
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e000edfc 	.word	0xe000edfc
 8000568:	e0000e00 	.word	0xe0000e00

0800056c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	e00a      	b.n	8000594 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800057e:	f3af 8000 	nop.w
 8000582:	4601      	mov	r1, r0
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	60ba      	str	r2, [r7, #8]
 800058a:	b2ca      	uxtb	r2, r1
 800058c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	3301      	adds	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	dbf0      	blt.n	800057e <_read+0x12>
  }

  return len;
 800059c:	687b      	ldr	r3, [r7, #4]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b086      	sub	sp, #24
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	60f8      	str	r0, [r7, #12]
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	e009      	b.n	80005cc <_write+0x26>
  {
	  //__io_putchar(*ptr++);
	  //commented above and added this below
	  ITM_SendChar(*ptr++);
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	60ba      	str	r2, [r7, #8]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ffab 	bl	800051c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	3301      	adds	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbf1      	blt.n	80005b8 <_write+0x12>
  }
  return len;
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <_close>:

int _close(int file)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000606:	605a      	str	r2, [r3, #4]
  return 0;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <_isatty>:

int _isatty(int file)
{
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000650:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <_sbrk+0x5c>)
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <_sbrk+0x60>)
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800065c:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <_sbrk+0x64>)
 8000666:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <_sbrk+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	429a      	cmp	r2, r3
 8000676:	d207      	bcs.n	8000688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000678:	f000 fa8c 	bl	8000b94 <__errno>
 800067c:	4603      	mov	r3, r0
 800067e:	220c      	movs	r2, #12
 8000680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	e009      	b.n	800069c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <_sbrk+0x64>)
 8000698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20020000 	.word	0x20020000
 80006a8:	00000400 	.word	0x00000400
 80006ac:	20000078 	.word	0x20000078
 80006b0:	200001c8 	.word	0x200001c8

080006b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b4:	480d      	ldr	r0, [pc, #52]	@ (80006ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006bc:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006be:	490d      	ldr	r1, [pc, #52]	@ (80006f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c0:	4a0d      	ldr	r2, [pc, #52]	@ (80006f8 <LoopForever+0xe>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c4:	e002      	b.n	80006cc <LoopCopyDataInit>

080006c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ca:	3304      	adds	r3, #4

080006cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d0:	d3f9      	bcc.n	80006c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d2:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000700 <LoopForever+0x16>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d8:	e001      	b.n	80006de <LoopFillZerobss>

080006da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006dc:	3204      	adds	r2, #4

080006de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e0:	d3fb      	bcc.n	80006da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006e2:	f000 fa5d 	bl	8000ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e6:	f7ff fd85 	bl	80001f4 <main>

080006ea <LoopForever>:

LoopForever:
  b LoopForever
 80006ea:	e7fe      	b.n	80006ea <LoopForever>
  ldr   r0, =_estack
 80006ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006f8:	080010c0 	.word	0x080010c0
  ldr r2, =_sbss
 80006fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000700:	200001c8 	.word	0x200001c8

08000704 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC_IRQHandler>
	...

08000708 <std>:
 8000708:	2300      	movs	r3, #0
 800070a:	b510      	push	{r4, lr}
 800070c:	4604      	mov	r4, r0
 800070e:	e9c0 3300 	strd	r3, r3, [r0]
 8000712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000716:	6083      	str	r3, [r0, #8]
 8000718:	8181      	strh	r1, [r0, #12]
 800071a:	6643      	str	r3, [r0, #100]	@ 0x64
 800071c:	81c2      	strh	r2, [r0, #14]
 800071e:	6183      	str	r3, [r0, #24]
 8000720:	4619      	mov	r1, r3
 8000722:	2208      	movs	r2, #8
 8000724:	305c      	adds	r0, #92	@ 0x5c
 8000726:	f000 f9e7 	bl	8000af8 <memset>
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <std+0x58>)
 800072c:	6263      	str	r3, [r4, #36]	@ 0x24
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <std+0x5c>)
 8000730:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <std+0x60>)
 8000734:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <std+0x64>)
 8000738:	6323      	str	r3, [r4, #48]	@ 0x30
 800073a:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <std+0x68>)
 800073c:	6224      	str	r4, [r4, #32]
 800073e:	429c      	cmp	r4, r3
 8000740:	d006      	beq.n	8000750 <std+0x48>
 8000742:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000746:	4294      	cmp	r4, r2
 8000748:	d002      	beq.n	8000750 <std+0x48>
 800074a:	33d0      	adds	r3, #208	@ 0xd0
 800074c:	429c      	cmp	r4, r3
 800074e:	d105      	bne.n	800075c <std+0x54>
 8000750:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000758:	f000 ba46 	b.w	8000be8 <__retarget_lock_init_recursive>
 800075c:	bd10      	pop	{r4, pc}
 800075e:	bf00      	nop
 8000760:	08000949 	.word	0x08000949
 8000764:	0800096b 	.word	0x0800096b
 8000768:	080009a3 	.word	0x080009a3
 800076c:	080009c7 	.word	0x080009c7
 8000770:	2000007c 	.word	0x2000007c

08000774 <stdio_exit_handler>:
 8000774:	4a02      	ldr	r2, [pc, #8]	@ (8000780 <stdio_exit_handler+0xc>)
 8000776:	4903      	ldr	r1, [pc, #12]	@ (8000784 <stdio_exit_handler+0x10>)
 8000778:	4803      	ldr	r0, [pc, #12]	@ (8000788 <stdio_exit_handler+0x14>)
 800077a:	f000 b869 	b.w	8000850 <_fwalk_sglue>
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000
 8000784:	08000ee9 	.word	0x08000ee9
 8000788:	20000010 	.word	0x20000010

0800078c <cleanup_stdio>:
 800078c:	6841      	ldr	r1, [r0, #4]
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <cleanup_stdio+0x34>)
 8000790:	4299      	cmp	r1, r3
 8000792:	b510      	push	{r4, lr}
 8000794:	4604      	mov	r4, r0
 8000796:	d001      	beq.n	800079c <cleanup_stdio+0x10>
 8000798:	f000 fba6 	bl	8000ee8 <_fflush_r>
 800079c:	68a1      	ldr	r1, [r4, #8]
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <cleanup_stdio+0x38>)
 80007a0:	4299      	cmp	r1, r3
 80007a2:	d002      	beq.n	80007aa <cleanup_stdio+0x1e>
 80007a4:	4620      	mov	r0, r4
 80007a6:	f000 fb9f 	bl	8000ee8 <_fflush_r>
 80007aa:	68e1      	ldr	r1, [r4, #12]
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <cleanup_stdio+0x3c>)
 80007ae:	4299      	cmp	r1, r3
 80007b0:	d004      	beq.n	80007bc <cleanup_stdio+0x30>
 80007b2:	4620      	mov	r0, r4
 80007b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b8:	f000 bb96 	b.w	8000ee8 <_fflush_r>
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	bf00      	nop
 80007c0:	2000007c 	.word	0x2000007c
 80007c4:	200000e4 	.word	0x200000e4
 80007c8:	2000014c 	.word	0x2000014c

080007cc <global_stdio_init.part.0>:
 80007cc:	b510      	push	{r4, lr}
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <global_stdio_init.part.0+0x30>)
 80007d0:	4c0b      	ldr	r4, [pc, #44]	@ (8000800 <global_stdio_init.part.0+0x34>)
 80007d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000804 <global_stdio_init.part.0+0x38>)
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	4620      	mov	r0, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	2104      	movs	r1, #4
 80007dc:	f7ff ff94 	bl	8000708 <std>
 80007e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007e4:	2201      	movs	r2, #1
 80007e6:	2109      	movs	r1, #9
 80007e8:	f7ff ff8e 	bl	8000708 <std>
 80007ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007f0:	2202      	movs	r2, #2
 80007f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f6:	2112      	movs	r1, #18
 80007f8:	f7ff bf86 	b.w	8000708 <std>
 80007fc:	200001b4 	.word	0x200001b4
 8000800:	2000007c 	.word	0x2000007c
 8000804:	08000775 	.word	0x08000775

08000808 <__sfp_lock_acquire>:
 8000808:	4801      	ldr	r0, [pc, #4]	@ (8000810 <__sfp_lock_acquire+0x8>)
 800080a:	f000 b9ee 	b.w	8000bea <__retarget_lock_acquire_recursive>
 800080e:	bf00      	nop
 8000810:	200001bd 	.word	0x200001bd

08000814 <__sfp_lock_release>:
 8000814:	4801      	ldr	r0, [pc, #4]	@ (800081c <__sfp_lock_release+0x8>)
 8000816:	f000 b9e9 	b.w	8000bec <__retarget_lock_release_recursive>
 800081a:	bf00      	nop
 800081c:	200001bd 	.word	0x200001bd

08000820 <__sinit>:
 8000820:	b510      	push	{r4, lr}
 8000822:	4604      	mov	r4, r0
 8000824:	f7ff fff0 	bl	8000808 <__sfp_lock_acquire>
 8000828:	6a23      	ldr	r3, [r4, #32]
 800082a:	b11b      	cbz	r3, 8000834 <__sinit+0x14>
 800082c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000830:	f7ff bff0 	b.w	8000814 <__sfp_lock_release>
 8000834:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <__sinit+0x28>)
 8000836:	6223      	str	r3, [r4, #32]
 8000838:	4b04      	ldr	r3, [pc, #16]	@ (800084c <__sinit+0x2c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f5      	bne.n	800082c <__sinit+0xc>
 8000840:	f7ff ffc4 	bl	80007cc <global_stdio_init.part.0>
 8000844:	e7f2      	b.n	800082c <__sinit+0xc>
 8000846:	bf00      	nop
 8000848:	0800078d 	.word	0x0800078d
 800084c:	200001b4 	.word	0x200001b4

08000850 <_fwalk_sglue>:
 8000850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000854:	4607      	mov	r7, r0
 8000856:	4688      	mov	r8, r1
 8000858:	4614      	mov	r4, r2
 800085a:	2600      	movs	r6, #0
 800085c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000860:	f1b9 0901 	subs.w	r9, r9, #1
 8000864:	d505      	bpl.n	8000872 <_fwalk_sglue+0x22>
 8000866:	6824      	ldr	r4, [r4, #0]
 8000868:	2c00      	cmp	r4, #0
 800086a:	d1f7      	bne.n	800085c <_fwalk_sglue+0xc>
 800086c:	4630      	mov	r0, r6
 800086e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000872:	89ab      	ldrh	r3, [r5, #12]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d907      	bls.n	8000888 <_fwalk_sglue+0x38>
 8000878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800087c:	3301      	adds	r3, #1
 800087e:	d003      	beq.n	8000888 <_fwalk_sglue+0x38>
 8000880:	4629      	mov	r1, r5
 8000882:	4638      	mov	r0, r7
 8000884:	47c0      	blx	r8
 8000886:	4306      	orrs	r6, r0
 8000888:	3568      	adds	r5, #104	@ 0x68
 800088a:	e7e9      	b.n	8000860 <_fwalk_sglue+0x10>

0800088c <_puts_r>:
 800088c:	6a03      	ldr	r3, [r0, #32]
 800088e:	b570      	push	{r4, r5, r6, lr}
 8000890:	6884      	ldr	r4, [r0, #8]
 8000892:	4605      	mov	r5, r0
 8000894:	460e      	mov	r6, r1
 8000896:	b90b      	cbnz	r3, 800089c <_puts_r+0x10>
 8000898:	f7ff ffc2 	bl	8000820 <__sinit>
 800089c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800089e:	07db      	lsls	r3, r3, #31
 80008a0:	d405      	bmi.n	80008ae <_puts_r+0x22>
 80008a2:	89a3      	ldrh	r3, [r4, #12]
 80008a4:	0598      	lsls	r0, r3, #22
 80008a6:	d402      	bmi.n	80008ae <_puts_r+0x22>
 80008a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80008aa:	f000 f99e 	bl	8000bea <__retarget_lock_acquire_recursive>
 80008ae:	89a3      	ldrh	r3, [r4, #12]
 80008b0:	0719      	lsls	r1, r3, #28
 80008b2:	d502      	bpl.n	80008ba <_puts_r+0x2e>
 80008b4:	6923      	ldr	r3, [r4, #16]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d135      	bne.n	8000926 <_puts_r+0x9a>
 80008ba:	4621      	mov	r1, r4
 80008bc:	4628      	mov	r0, r5
 80008be:	f000 f8c5 	bl	8000a4c <__swsetup_r>
 80008c2:	b380      	cbz	r0, 8000926 <_puts_r+0x9a>
 80008c4:	f04f 35ff 	mov.w	r5, #4294967295
 80008c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80008ca:	07da      	lsls	r2, r3, #31
 80008cc:	d405      	bmi.n	80008da <_puts_r+0x4e>
 80008ce:	89a3      	ldrh	r3, [r4, #12]
 80008d0:	059b      	lsls	r3, r3, #22
 80008d2:	d402      	bmi.n	80008da <_puts_r+0x4e>
 80008d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80008d6:	f000 f989 	bl	8000bec <__retarget_lock_release_recursive>
 80008da:	4628      	mov	r0, r5
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	2b00      	cmp	r3, #0
 80008e0:	da04      	bge.n	80008ec <_puts_r+0x60>
 80008e2:	69a2      	ldr	r2, [r4, #24]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dc17      	bgt.n	8000918 <_puts_r+0x8c>
 80008e8:	290a      	cmp	r1, #10
 80008ea:	d015      	beq.n	8000918 <_puts_r+0x8c>
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	6022      	str	r2, [r4, #0]
 80008f2:	7019      	strb	r1, [r3, #0]
 80008f4:	68a3      	ldr	r3, [r4, #8]
 80008f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008fa:	3b01      	subs	r3, #1
 80008fc:	60a3      	str	r3, [r4, #8]
 80008fe:	2900      	cmp	r1, #0
 8000900:	d1ed      	bne.n	80008de <_puts_r+0x52>
 8000902:	2b00      	cmp	r3, #0
 8000904:	da11      	bge.n	800092a <_puts_r+0x9e>
 8000906:	4622      	mov	r2, r4
 8000908:	210a      	movs	r1, #10
 800090a:	4628      	mov	r0, r5
 800090c:	f000 f85f 	bl	80009ce <__swbuf_r>
 8000910:	3001      	adds	r0, #1
 8000912:	d0d7      	beq.n	80008c4 <_puts_r+0x38>
 8000914:	250a      	movs	r5, #10
 8000916:	e7d7      	b.n	80008c8 <_puts_r+0x3c>
 8000918:	4622      	mov	r2, r4
 800091a:	4628      	mov	r0, r5
 800091c:	f000 f857 	bl	80009ce <__swbuf_r>
 8000920:	3001      	adds	r0, #1
 8000922:	d1e7      	bne.n	80008f4 <_puts_r+0x68>
 8000924:	e7ce      	b.n	80008c4 <_puts_r+0x38>
 8000926:	3e01      	subs	r6, #1
 8000928:	e7e4      	b.n	80008f4 <_puts_r+0x68>
 800092a:	6823      	ldr	r3, [r4, #0]
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	6022      	str	r2, [r4, #0]
 8000930:	220a      	movs	r2, #10
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e7ee      	b.n	8000914 <_puts_r+0x88>
	...

08000938 <puts>:
 8000938:	4b02      	ldr	r3, [pc, #8]	@ (8000944 <puts+0xc>)
 800093a:	4601      	mov	r1, r0
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	f7ff bfa5 	b.w	800088c <_puts_r>
 8000942:	bf00      	nop
 8000944:	2000000c 	.word	0x2000000c

08000948 <__sread>:
 8000948:	b510      	push	{r4, lr}
 800094a:	460c      	mov	r4, r1
 800094c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000950:	f000 f8fc 	bl	8000b4c <_read_r>
 8000954:	2800      	cmp	r0, #0
 8000956:	bfab      	itete	ge
 8000958:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800095a:	89a3      	ldrhlt	r3, [r4, #12]
 800095c:	181b      	addge	r3, r3, r0
 800095e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000962:	bfac      	ite	ge
 8000964:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000966:	81a3      	strhlt	r3, [r4, #12]
 8000968:	bd10      	pop	{r4, pc}

0800096a <__swrite>:
 800096a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800096e:	461f      	mov	r7, r3
 8000970:	898b      	ldrh	r3, [r1, #12]
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	4605      	mov	r5, r0
 8000976:	460c      	mov	r4, r1
 8000978:	4616      	mov	r6, r2
 800097a:	d505      	bpl.n	8000988 <__swrite+0x1e>
 800097c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000980:	2302      	movs	r3, #2
 8000982:	2200      	movs	r2, #0
 8000984:	f000 f8d0 	bl	8000b28 <_lseek_r>
 8000988:	89a3      	ldrh	r3, [r4, #12]
 800098a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800098e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000992:	81a3      	strh	r3, [r4, #12]
 8000994:	4632      	mov	r2, r6
 8000996:	463b      	mov	r3, r7
 8000998:	4628      	mov	r0, r5
 800099a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800099e:	f000 b8e7 	b.w	8000b70 <_write_r>

080009a2 <__sseek>:
 80009a2:	b510      	push	{r4, lr}
 80009a4:	460c      	mov	r4, r1
 80009a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009aa:	f000 f8bd 	bl	8000b28 <_lseek_r>
 80009ae:	1c43      	adds	r3, r0, #1
 80009b0:	89a3      	ldrh	r3, [r4, #12]
 80009b2:	bf15      	itete	ne
 80009b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80009b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80009ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80009be:	81a3      	strheq	r3, [r4, #12]
 80009c0:	bf18      	it	ne
 80009c2:	81a3      	strhne	r3, [r4, #12]
 80009c4:	bd10      	pop	{r4, pc}

080009c6 <__sclose>:
 80009c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009ca:	f000 b89d 	b.w	8000b08 <_close_r>

080009ce <__swbuf_r>:
 80009ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d0:	460e      	mov	r6, r1
 80009d2:	4614      	mov	r4, r2
 80009d4:	4605      	mov	r5, r0
 80009d6:	b118      	cbz	r0, 80009e0 <__swbuf_r+0x12>
 80009d8:	6a03      	ldr	r3, [r0, #32]
 80009da:	b90b      	cbnz	r3, 80009e0 <__swbuf_r+0x12>
 80009dc:	f7ff ff20 	bl	8000820 <__sinit>
 80009e0:	69a3      	ldr	r3, [r4, #24]
 80009e2:	60a3      	str	r3, [r4, #8]
 80009e4:	89a3      	ldrh	r3, [r4, #12]
 80009e6:	071a      	lsls	r2, r3, #28
 80009e8:	d501      	bpl.n	80009ee <__swbuf_r+0x20>
 80009ea:	6923      	ldr	r3, [r4, #16]
 80009ec:	b943      	cbnz	r3, 8000a00 <__swbuf_r+0x32>
 80009ee:	4621      	mov	r1, r4
 80009f0:	4628      	mov	r0, r5
 80009f2:	f000 f82b 	bl	8000a4c <__swsetup_r>
 80009f6:	b118      	cbz	r0, 8000a00 <__swbuf_r+0x32>
 80009f8:	f04f 37ff 	mov.w	r7, #4294967295
 80009fc:	4638      	mov	r0, r7
 80009fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	6922      	ldr	r2, [r4, #16]
 8000a04:	1a98      	subs	r0, r3, r2
 8000a06:	6963      	ldr	r3, [r4, #20]
 8000a08:	b2f6      	uxtb	r6, r6
 8000a0a:	4283      	cmp	r3, r0
 8000a0c:	4637      	mov	r7, r6
 8000a0e:	dc05      	bgt.n	8000a1c <__swbuf_r+0x4e>
 8000a10:	4621      	mov	r1, r4
 8000a12:	4628      	mov	r0, r5
 8000a14:	f000 fa68 	bl	8000ee8 <_fflush_r>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d1ed      	bne.n	80009f8 <__swbuf_r+0x2a>
 8000a1c:	68a3      	ldr	r3, [r4, #8]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	60a3      	str	r3, [r4, #8]
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	6022      	str	r2, [r4, #0]
 8000a28:	701e      	strb	r6, [r3, #0]
 8000a2a:	6962      	ldr	r2, [r4, #20]
 8000a2c:	1c43      	adds	r3, r0, #1
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d004      	beq.n	8000a3c <__swbuf_r+0x6e>
 8000a32:	89a3      	ldrh	r3, [r4, #12]
 8000a34:	07db      	lsls	r3, r3, #31
 8000a36:	d5e1      	bpl.n	80009fc <__swbuf_r+0x2e>
 8000a38:	2e0a      	cmp	r6, #10
 8000a3a:	d1df      	bne.n	80009fc <__swbuf_r+0x2e>
 8000a3c:	4621      	mov	r1, r4
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f000 fa52 	bl	8000ee8 <_fflush_r>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d0d9      	beq.n	80009fc <__swbuf_r+0x2e>
 8000a48:	e7d6      	b.n	80009f8 <__swbuf_r+0x2a>
	...

08000a4c <__swsetup_r>:
 8000a4c:	b538      	push	{r3, r4, r5, lr}
 8000a4e:	4b29      	ldr	r3, [pc, #164]	@ (8000af4 <__swsetup_r+0xa8>)
 8000a50:	4605      	mov	r5, r0
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	460c      	mov	r4, r1
 8000a56:	b118      	cbz	r0, 8000a60 <__swsetup_r+0x14>
 8000a58:	6a03      	ldr	r3, [r0, #32]
 8000a5a:	b90b      	cbnz	r3, 8000a60 <__swsetup_r+0x14>
 8000a5c:	f7ff fee0 	bl	8000820 <__sinit>
 8000a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a64:	0719      	lsls	r1, r3, #28
 8000a66:	d422      	bmi.n	8000aae <__swsetup_r+0x62>
 8000a68:	06da      	lsls	r2, r3, #27
 8000a6a:	d407      	bmi.n	8000a7c <__swsetup_r+0x30>
 8000a6c:	2209      	movs	r2, #9
 8000a6e:	602a      	str	r2, [r5, #0]
 8000a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a74:	81a3      	strh	r3, [r4, #12]
 8000a76:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7a:	e033      	b.n	8000ae4 <__swsetup_r+0x98>
 8000a7c:	0758      	lsls	r0, r3, #29
 8000a7e:	d512      	bpl.n	8000aa6 <__swsetup_r+0x5a>
 8000a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000a82:	b141      	cbz	r1, 8000a96 <__swsetup_r+0x4a>
 8000a84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a88:	4299      	cmp	r1, r3
 8000a8a:	d002      	beq.n	8000a92 <__swsetup_r+0x46>
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	f000 f8af 	bl	8000bf0 <_free_r>
 8000a92:	2300      	movs	r3, #0
 8000a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a96:	89a3      	ldrh	r3, [r4, #12]
 8000a98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000a9c:	81a3      	strh	r3, [r4, #12]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	6063      	str	r3, [r4, #4]
 8000aa2:	6923      	ldr	r3, [r4, #16]
 8000aa4:	6023      	str	r3, [r4, #0]
 8000aa6:	89a3      	ldrh	r3, [r4, #12]
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	81a3      	strh	r3, [r4, #12]
 8000aae:	6923      	ldr	r3, [r4, #16]
 8000ab0:	b94b      	cbnz	r3, 8000ac6 <__swsetup_r+0x7a>
 8000ab2:	89a3      	ldrh	r3, [r4, #12]
 8000ab4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000abc:	d003      	beq.n	8000ac6 <__swsetup_r+0x7a>
 8000abe:	4621      	mov	r1, r4
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	f000 fa5f 	bl	8000f84 <__smakebuf_r>
 8000ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aca:	f013 0201 	ands.w	r2, r3, #1
 8000ace:	d00a      	beq.n	8000ae6 <__swsetup_r+0x9a>
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60a2      	str	r2, [r4, #8]
 8000ad4:	6962      	ldr	r2, [r4, #20]
 8000ad6:	4252      	negs	r2, r2
 8000ad8:	61a2      	str	r2, [r4, #24]
 8000ada:	6922      	ldr	r2, [r4, #16]
 8000adc:	b942      	cbnz	r2, 8000af0 <__swsetup_r+0xa4>
 8000ade:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000ae2:	d1c5      	bne.n	8000a70 <__swsetup_r+0x24>
 8000ae4:	bd38      	pop	{r3, r4, r5, pc}
 8000ae6:	0799      	lsls	r1, r3, #30
 8000ae8:	bf58      	it	pl
 8000aea:	6962      	ldrpl	r2, [r4, #20]
 8000aec:	60a2      	str	r2, [r4, #8]
 8000aee:	e7f4      	b.n	8000ada <__swsetup_r+0x8e>
 8000af0:	2000      	movs	r0, #0
 8000af2:	e7f7      	b.n	8000ae4 <__swsetup_r+0x98>
 8000af4:	2000000c 	.word	0x2000000c

08000af8 <memset>:
 8000af8:	4402      	add	r2, r0
 8000afa:	4603      	mov	r3, r0
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d100      	bne.n	8000b02 <memset+0xa>
 8000b00:	4770      	bx	lr
 8000b02:	f803 1b01 	strb.w	r1, [r3], #1
 8000b06:	e7f9      	b.n	8000afc <memset+0x4>

08000b08 <_close_r>:
 8000b08:	b538      	push	{r3, r4, r5, lr}
 8000b0a:	4d06      	ldr	r5, [pc, #24]	@ (8000b24 <_close_r+0x1c>)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	4604      	mov	r4, r0
 8000b10:	4608      	mov	r0, r1
 8000b12:	602b      	str	r3, [r5, #0]
 8000b14:	f7ff fd63 	bl	80005de <_close>
 8000b18:	1c43      	adds	r3, r0, #1
 8000b1a:	d102      	bne.n	8000b22 <_close_r+0x1a>
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	b103      	cbz	r3, 8000b22 <_close_r+0x1a>
 8000b20:	6023      	str	r3, [r4, #0]
 8000b22:	bd38      	pop	{r3, r4, r5, pc}
 8000b24:	200001b8 	.word	0x200001b8

08000b28 <_lseek_r>:
 8000b28:	b538      	push	{r3, r4, r5, lr}
 8000b2a:	4d07      	ldr	r5, [pc, #28]	@ (8000b48 <_lseek_r+0x20>)
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	4611      	mov	r1, r2
 8000b32:	2200      	movs	r2, #0
 8000b34:	602a      	str	r2, [r5, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	f7ff fd78 	bl	800062c <_lseek>
 8000b3c:	1c43      	adds	r3, r0, #1
 8000b3e:	d102      	bne.n	8000b46 <_lseek_r+0x1e>
 8000b40:	682b      	ldr	r3, [r5, #0]
 8000b42:	b103      	cbz	r3, 8000b46 <_lseek_r+0x1e>
 8000b44:	6023      	str	r3, [r4, #0]
 8000b46:	bd38      	pop	{r3, r4, r5, pc}
 8000b48:	200001b8 	.word	0x200001b8

08000b4c <_read_r>:
 8000b4c:	b538      	push	{r3, r4, r5, lr}
 8000b4e:	4d07      	ldr	r5, [pc, #28]	@ (8000b6c <_read_r+0x20>)
 8000b50:	4604      	mov	r4, r0
 8000b52:	4608      	mov	r0, r1
 8000b54:	4611      	mov	r1, r2
 8000b56:	2200      	movs	r2, #0
 8000b58:	602a      	str	r2, [r5, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	f7ff fd06 	bl	800056c <_read>
 8000b60:	1c43      	adds	r3, r0, #1
 8000b62:	d102      	bne.n	8000b6a <_read_r+0x1e>
 8000b64:	682b      	ldr	r3, [r5, #0]
 8000b66:	b103      	cbz	r3, 8000b6a <_read_r+0x1e>
 8000b68:	6023      	str	r3, [r4, #0]
 8000b6a:	bd38      	pop	{r3, r4, r5, pc}
 8000b6c:	200001b8 	.word	0x200001b8

08000b70 <_write_r>:
 8000b70:	b538      	push	{r3, r4, r5, lr}
 8000b72:	4d07      	ldr	r5, [pc, #28]	@ (8000b90 <_write_r+0x20>)
 8000b74:	4604      	mov	r4, r0
 8000b76:	4608      	mov	r0, r1
 8000b78:	4611      	mov	r1, r2
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	602a      	str	r2, [r5, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f7ff fd11 	bl	80005a6 <_write>
 8000b84:	1c43      	adds	r3, r0, #1
 8000b86:	d102      	bne.n	8000b8e <_write_r+0x1e>
 8000b88:	682b      	ldr	r3, [r5, #0]
 8000b8a:	b103      	cbz	r3, 8000b8e <_write_r+0x1e>
 8000b8c:	6023      	str	r3, [r4, #0]
 8000b8e:	bd38      	pop	{r3, r4, r5, pc}
 8000b90:	200001b8 	.word	0x200001b8

08000b94 <__errno>:
 8000b94:	4b01      	ldr	r3, [pc, #4]	@ (8000b9c <__errno+0x8>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2000000c 	.word	0x2000000c

08000ba0 <__libc_init_array>:
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	4d0d      	ldr	r5, [pc, #52]	@ (8000bd8 <__libc_init_array+0x38>)
 8000ba4:	4c0d      	ldr	r4, [pc, #52]	@ (8000bdc <__libc_init_array+0x3c>)
 8000ba6:	1b64      	subs	r4, r4, r5
 8000ba8:	10a4      	asrs	r4, r4, #2
 8000baa:	2600      	movs	r6, #0
 8000bac:	42a6      	cmp	r6, r4
 8000bae:	d109      	bne.n	8000bc4 <__libc_init_array+0x24>
 8000bb0:	4d0b      	ldr	r5, [pc, #44]	@ (8000be0 <__libc_init_array+0x40>)
 8000bb2:	4c0c      	ldr	r4, [pc, #48]	@ (8000be4 <__libc_init_array+0x44>)
 8000bb4:	f000 fa54 	bl	8001060 <_init>
 8000bb8:	1b64      	subs	r4, r4, r5
 8000bba:	10a4      	asrs	r4, r4, #2
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	42a6      	cmp	r6, r4
 8000bc0:	d105      	bne.n	8000bce <__libc_init_array+0x2e>
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bc8:	4798      	blx	r3
 8000bca:	3601      	adds	r6, #1
 8000bcc:	e7ee      	b.n	8000bac <__libc_init_array+0xc>
 8000bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd2:	4798      	blx	r3
 8000bd4:	3601      	adds	r6, #1
 8000bd6:	e7f2      	b.n	8000bbe <__libc_init_array+0x1e>
 8000bd8:	080010b8 	.word	0x080010b8
 8000bdc:	080010b8 	.word	0x080010b8
 8000be0:	080010b8 	.word	0x080010b8
 8000be4:	080010bc 	.word	0x080010bc

08000be8 <__retarget_lock_init_recursive>:
 8000be8:	4770      	bx	lr

08000bea <__retarget_lock_acquire_recursive>:
 8000bea:	4770      	bx	lr

08000bec <__retarget_lock_release_recursive>:
 8000bec:	4770      	bx	lr
	...

08000bf0 <_free_r>:
 8000bf0:	b538      	push	{r3, r4, r5, lr}
 8000bf2:	4605      	mov	r5, r0
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d041      	beq.n	8000c7c <_free_r+0x8c>
 8000bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bfc:	1f0c      	subs	r4, r1, #4
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bfb8      	it	lt
 8000c02:	18e4      	addlt	r4, r4, r3
 8000c04:	f000 f8e0 	bl	8000dc8 <__malloc_lock>
 8000c08:	4a1d      	ldr	r2, [pc, #116]	@ (8000c80 <_free_r+0x90>)
 8000c0a:	6813      	ldr	r3, [r2, #0]
 8000c0c:	b933      	cbnz	r3, 8000c1c <_free_r+0x2c>
 8000c0e:	6063      	str	r3, [r4, #4]
 8000c10:	6014      	str	r4, [r2, #0]
 8000c12:	4628      	mov	r0, r5
 8000c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c18:	f000 b8dc 	b.w	8000dd4 <__malloc_unlock>
 8000c1c:	42a3      	cmp	r3, r4
 8000c1e:	d908      	bls.n	8000c32 <_free_r+0x42>
 8000c20:	6820      	ldr	r0, [r4, #0]
 8000c22:	1821      	adds	r1, r4, r0
 8000c24:	428b      	cmp	r3, r1
 8000c26:	bf01      	itttt	eq
 8000c28:	6819      	ldreq	r1, [r3, #0]
 8000c2a:	685b      	ldreq	r3, [r3, #4]
 8000c2c:	1809      	addeq	r1, r1, r0
 8000c2e:	6021      	streq	r1, [r4, #0]
 8000c30:	e7ed      	b.n	8000c0e <_free_r+0x1e>
 8000c32:	461a      	mov	r2, r3
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	b10b      	cbz	r3, 8000c3c <_free_r+0x4c>
 8000c38:	42a3      	cmp	r3, r4
 8000c3a:	d9fa      	bls.n	8000c32 <_free_r+0x42>
 8000c3c:	6811      	ldr	r1, [r2, #0]
 8000c3e:	1850      	adds	r0, r2, r1
 8000c40:	42a0      	cmp	r0, r4
 8000c42:	d10b      	bne.n	8000c5c <_free_r+0x6c>
 8000c44:	6820      	ldr	r0, [r4, #0]
 8000c46:	4401      	add	r1, r0
 8000c48:	1850      	adds	r0, r2, r1
 8000c4a:	4283      	cmp	r3, r0
 8000c4c:	6011      	str	r1, [r2, #0]
 8000c4e:	d1e0      	bne.n	8000c12 <_free_r+0x22>
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	6053      	str	r3, [r2, #4]
 8000c56:	4408      	add	r0, r1
 8000c58:	6010      	str	r0, [r2, #0]
 8000c5a:	e7da      	b.n	8000c12 <_free_r+0x22>
 8000c5c:	d902      	bls.n	8000c64 <_free_r+0x74>
 8000c5e:	230c      	movs	r3, #12
 8000c60:	602b      	str	r3, [r5, #0]
 8000c62:	e7d6      	b.n	8000c12 <_free_r+0x22>
 8000c64:	6820      	ldr	r0, [r4, #0]
 8000c66:	1821      	adds	r1, r4, r0
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	bf04      	itt	eq
 8000c6c:	6819      	ldreq	r1, [r3, #0]
 8000c6e:	685b      	ldreq	r3, [r3, #4]
 8000c70:	6063      	str	r3, [r4, #4]
 8000c72:	bf04      	itt	eq
 8000c74:	1809      	addeq	r1, r1, r0
 8000c76:	6021      	streq	r1, [r4, #0]
 8000c78:	6054      	str	r4, [r2, #4]
 8000c7a:	e7ca      	b.n	8000c12 <_free_r+0x22>
 8000c7c:	bd38      	pop	{r3, r4, r5, pc}
 8000c7e:	bf00      	nop
 8000c80:	200001c4 	.word	0x200001c4

08000c84 <sbrk_aligned>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	4e0f      	ldr	r6, [pc, #60]	@ (8000cc4 <sbrk_aligned+0x40>)
 8000c88:	460c      	mov	r4, r1
 8000c8a:	6831      	ldr	r1, [r6, #0]
 8000c8c:	4605      	mov	r5, r0
 8000c8e:	b911      	cbnz	r1, 8000c96 <sbrk_aligned+0x12>
 8000c90:	f000 f9d6 	bl	8001040 <_sbrk_r>
 8000c94:	6030      	str	r0, [r6, #0]
 8000c96:	4621      	mov	r1, r4
 8000c98:	4628      	mov	r0, r5
 8000c9a:	f000 f9d1 	bl	8001040 <_sbrk_r>
 8000c9e:	1c43      	adds	r3, r0, #1
 8000ca0:	d103      	bne.n	8000caa <sbrk_aligned+0x26>
 8000ca2:	f04f 34ff 	mov.w	r4, #4294967295
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	bd70      	pop	{r4, r5, r6, pc}
 8000caa:	1cc4      	adds	r4, r0, #3
 8000cac:	f024 0403 	bic.w	r4, r4, #3
 8000cb0:	42a0      	cmp	r0, r4
 8000cb2:	d0f8      	beq.n	8000ca6 <sbrk_aligned+0x22>
 8000cb4:	1a21      	subs	r1, r4, r0
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	f000 f9c2 	bl	8001040 <_sbrk_r>
 8000cbc:	3001      	adds	r0, #1
 8000cbe:	d1f2      	bne.n	8000ca6 <sbrk_aligned+0x22>
 8000cc0:	e7ef      	b.n	8000ca2 <sbrk_aligned+0x1e>
 8000cc2:	bf00      	nop
 8000cc4:	200001c0 	.word	0x200001c0

08000cc8 <_malloc_r>:
 8000cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ccc:	1ccd      	adds	r5, r1, #3
 8000cce:	f025 0503 	bic.w	r5, r5, #3
 8000cd2:	3508      	adds	r5, #8
 8000cd4:	2d0c      	cmp	r5, #12
 8000cd6:	bf38      	it	cc
 8000cd8:	250c      	movcc	r5, #12
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	4606      	mov	r6, r0
 8000cde:	db01      	blt.n	8000ce4 <_malloc_r+0x1c>
 8000ce0:	42a9      	cmp	r1, r5
 8000ce2:	d904      	bls.n	8000cee <_malloc_r+0x26>
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	6033      	str	r3, [r6, #0]
 8000ce8:	2000      	movs	r0, #0
 8000cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000dc4 <_malloc_r+0xfc>
 8000cf2:	f000 f869 	bl	8000dc8 <__malloc_lock>
 8000cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8000cfa:	461c      	mov	r4, r3
 8000cfc:	bb44      	cbnz	r4, 8000d50 <_malloc_r+0x88>
 8000cfe:	4629      	mov	r1, r5
 8000d00:	4630      	mov	r0, r6
 8000d02:	f7ff ffbf 	bl	8000c84 <sbrk_aligned>
 8000d06:	1c43      	adds	r3, r0, #1
 8000d08:	4604      	mov	r4, r0
 8000d0a:	d158      	bne.n	8000dbe <_malloc_r+0xf6>
 8000d0c:	f8d8 4000 	ldr.w	r4, [r8]
 8000d10:	4627      	mov	r7, r4
 8000d12:	2f00      	cmp	r7, #0
 8000d14:	d143      	bne.n	8000d9e <_malloc_r+0xd6>
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d04b      	beq.n	8000db2 <_malloc_r+0xea>
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	4630      	mov	r0, r6
 8000d20:	eb04 0903 	add.w	r9, r4, r3
 8000d24:	f000 f98c 	bl	8001040 <_sbrk_r>
 8000d28:	4581      	cmp	r9, r0
 8000d2a:	d142      	bne.n	8000db2 <_malloc_r+0xea>
 8000d2c:	6821      	ldr	r1, [r4, #0]
 8000d2e:	1a6d      	subs	r5, r5, r1
 8000d30:	4629      	mov	r1, r5
 8000d32:	4630      	mov	r0, r6
 8000d34:	f7ff ffa6 	bl	8000c84 <sbrk_aligned>
 8000d38:	3001      	adds	r0, #1
 8000d3a:	d03a      	beq.n	8000db2 <_malloc_r+0xea>
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	442b      	add	r3, r5
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	f8d8 3000 	ldr.w	r3, [r8]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	bb62      	cbnz	r2, 8000da4 <_malloc_r+0xdc>
 8000d4a:	f8c8 7000 	str.w	r7, [r8]
 8000d4e:	e00f      	b.n	8000d70 <_malloc_r+0xa8>
 8000d50:	6822      	ldr	r2, [r4, #0]
 8000d52:	1b52      	subs	r2, r2, r5
 8000d54:	d420      	bmi.n	8000d98 <_malloc_r+0xd0>
 8000d56:	2a0b      	cmp	r2, #11
 8000d58:	d917      	bls.n	8000d8a <_malloc_r+0xc2>
 8000d5a:	1961      	adds	r1, r4, r5
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	6025      	str	r5, [r4, #0]
 8000d60:	bf18      	it	ne
 8000d62:	6059      	strne	r1, [r3, #4]
 8000d64:	6863      	ldr	r3, [r4, #4]
 8000d66:	bf08      	it	eq
 8000d68:	f8c8 1000 	streq.w	r1, [r8]
 8000d6c:	5162      	str	r2, [r4, r5]
 8000d6e:	604b      	str	r3, [r1, #4]
 8000d70:	4630      	mov	r0, r6
 8000d72:	f000 f82f 	bl	8000dd4 <__malloc_unlock>
 8000d76:	f104 000b 	add.w	r0, r4, #11
 8000d7a:	1d23      	adds	r3, r4, #4
 8000d7c:	f020 0007 	bic.w	r0, r0, #7
 8000d80:	1ac2      	subs	r2, r0, r3
 8000d82:	bf1c      	itt	ne
 8000d84:	1a1b      	subne	r3, r3, r0
 8000d86:	50a3      	strne	r3, [r4, r2]
 8000d88:	e7af      	b.n	8000cea <_malloc_r+0x22>
 8000d8a:	6862      	ldr	r2, [r4, #4]
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	bf0c      	ite	eq
 8000d90:	f8c8 2000 	streq.w	r2, [r8]
 8000d94:	605a      	strne	r2, [r3, #4]
 8000d96:	e7eb      	b.n	8000d70 <_malloc_r+0xa8>
 8000d98:	4623      	mov	r3, r4
 8000d9a:	6864      	ldr	r4, [r4, #4]
 8000d9c:	e7ae      	b.n	8000cfc <_malloc_r+0x34>
 8000d9e:	463c      	mov	r4, r7
 8000da0:	687f      	ldr	r7, [r7, #4]
 8000da2:	e7b6      	b.n	8000d12 <_malloc_r+0x4a>
 8000da4:	461a      	mov	r2, r3
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	42a3      	cmp	r3, r4
 8000daa:	d1fb      	bne.n	8000da4 <_malloc_r+0xdc>
 8000dac:	2300      	movs	r3, #0
 8000dae:	6053      	str	r3, [r2, #4]
 8000db0:	e7de      	b.n	8000d70 <_malloc_r+0xa8>
 8000db2:	230c      	movs	r3, #12
 8000db4:	6033      	str	r3, [r6, #0]
 8000db6:	4630      	mov	r0, r6
 8000db8:	f000 f80c 	bl	8000dd4 <__malloc_unlock>
 8000dbc:	e794      	b.n	8000ce8 <_malloc_r+0x20>
 8000dbe:	6005      	str	r5, [r0, #0]
 8000dc0:	e7d6      	b.n	8000d70 <_malloc_r+0xa8>
 8000dc2:	bf00      	nop
 8000dc4:	200001c4 	.word	0x200001c4

08000dc8 <__malloc_lock>:
 8000dc8:	4801      	ldr	r0, [pc, #4]	@ (8000dd0 <__malloc_lock+0x8>)
 8000dca:	f7ff bf0e 	b.w	8000bea <__retarget_lock_acquire_recursive>
 8000dce:	bf00      	nop
 8000dd0:	200001bc 	.word	0x200001bc

08000dd4 <__malloc_unlock>:
 8000dd4:	4801      	ldr	r0, [pc, #4]	@ (8000ddc <__malloc_unlock+0x8>)
 8000dd6:	f7ff bf09 	b.w	8000bec <__retarget_lock_release_recursive>
 8000dda:	bf00      	nop
 8000ddc:	200001bc 	.word	0x200001bc

08000de0 <__sflush_r>:
 8000de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000de8:	0716      	lsls	r6, r2, #28
 8000dea:	4605      	mov	r5, r0
 8000dec:	460c      	mov	r4, r1
 8000dee:	d454      	bmi.n	8000e9a <__sflush_r+0xba>
 8000df0:	684b      	ldr	r3, [r1, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	dc02      	bgt.n	8000dfc <__sflush_r+0x1c>
 8000df6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	dd48      	ble.n	8000e8e <__sflush_r+0xae>
 8000dfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d045      	beq.n	8000e8e <__sflush_r+0xae>
 8000e02:	2300      	movs	r3, #0
 8000e04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000e08:	682f      	ldr	r7, [r5, #0]
 8000e0a:	6a21      	ldr	r1, [r4, #32]
 8000e0c:	602b      	str	r3, [r5, #0]
 8000e0e:	d030      	beq.n	8000e72 <__sflush_r+0x92>
 8000e10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000e12:	89a3      	ldrh	r3, [r4, #12]
 8000e14:	0759      	lsls	r1, r3, #29
 8000e16:	d505      	bpl.n	8000e24 <__sflush_r+0x44>
 8000e18:	6863      	ldr	r3, [r4, #4]
 8000e1a:	1ad2      	subs	r2, r2, r3
 8000e1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000e1e:	b10b      	cbz	r3, 8000e24 <__sflush_r+0x44>
 8000e20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e22:	1ad2      	subs	r2, r2, r3
 8000e24:	2300      	movs	r3, #0
 8000e26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000e28:	6a21      	ldr	r1, [r4, #32]
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	47b0      	blx	r6
 8000e2e:	1c43      	adds	r3, r0, #1
 8000e30:	89a3      	ldrh	r3, [r4, #12]
 8000e32:	d106      	bne.n	8000e42 <__sflush_r+0x62>
 8000e34:	6829      	ldr	r1, [r5, #0]
 8000e36:	291d      	cmp	r1, #29
 8000e38:	d82b      	bhi.n	8000e92 <__sflush_r+0xb2>
 8000e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ee4 <__sflush_r+0x104>)
 8000e3c:	410a      	asrs	r2, r1
 8000e3e:	07d6      	lsls	r6, r2, #31
 8000e40:	d427      	bmi.n	8000e92 <__sflush_r+0xb2>
 8000e42:	2200      	movs	r2, #0
 8000e44:	6062      	str	r2, [r4, #4]
 8000e46:	04d9      	lsls	r1, r3, #19
 8000e48:	6922      	ldr	r2, [r4, #16]
 8000e4a:	6022      	str	r2, [r4, #0]
 8000e4c:	d504      	bpl.n	8000e58 <__sflush_r+0x78>
 8000e4e:	1c42      	adds	r2, r0, #1
 8000e50:	d101      	bne.n	8000e56 <__sflush_r+0x76>
 8000e52:	682b      	ldr	r3, [r5, #0]
 8000e54:	b903      	cbnz	r3, 8000e58 <__sflush_r+0x78>
 8000e56:	6560      	str	r0, [r4, #84]	@ 0x54
 8000e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e5a:	602f      	str	r7, [r5, #0]
 8000e5c:	b1b9      	cbz	r1, 8000e8e <__sflush_r+0xae>
 8000e5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d002      	beq.n	8000e6c <__sflush_r+0x8c>
 8000e66:	4628      	mov	r0, r5
 8000e68:	f7ff fec2 	bl	8000bf0 <_free_r>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e70:	e00d      	b.n	8000e8e <__sflush_r+0xae>
 8000e72:	2301      	movs	r3, #1
 8000e74:	4628      	mov	r0, r5
 8000e76:	47b0      	blx	r6
 8000e78:	4602      	mov	r2, r0
 8000e7a:	1c50      	adds	r0, r2, #1
 8000e7c:	d1c9      	bne.n	8000e12 <__sflush_r+0x32>
 8000e7e:	682b      	ldr	r3, [r5, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0c6      	beq.n	8000e12 <__sflush_r+0x32>
 8000e84:	2b1d      	cmp	r3, #29
 8000e86:	d001      	beq.n	8000e8c <__sflush_r+0xac>
 8000e88:	2b16      	cmp	r3, #22
 8000e8a:	d11e      	bne.n	8000eca <__sflush_r+0xea>
 8000e8c:	602f      	str	r7, [r5, #0]
 8000e8e:	2000      	movs	r0, #0
 8000e90:	e022      	b.n	8000ed8 <__sflush_r+0xf8>
 8000e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	e01b      	b.n	8000ed2 <__sflush_r+0xf2>
 8000e9a:	690f      	ldr	r7, [r1, #16]
 8000e9c:	2f00      	cmp	r7, #0
 8000e9e:	d0f6      	beq.n	8000e8e <__sflush_r+0xae>
 8000ea0:	0793      	lsls	r3, r2, #30
 8000ea2:	680e      	ldr	r6, [r1, #0]
 8000ea4:	bf08      	it	eq
 8000ea6:	694b      	ldreq	r3, [r1, #20]
 8000ea8:	600f      	str	r7, [r1, #0]
 8000eaa:	bf18      	it	ne
 8000eac:	2300      	movne	r3, #0
 8000eae:	eba6 0807 	sub.w	r8, r6, r7
 8000eb2:	608b      	str	r3, [r1, #8]
 8000eb4:	f1b8 0f00 	cmp.w	r8, #0
 8000eb8:	dde9      	ble.n	8000e8e <__sflush_r+0xae>
 8000eba:	6a21      	ldr	r1, [r4, #32]
 8000ebc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	463a      	mov	r2, r7
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	47b0      	blx	r6
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	dc08      	bgt.n	8000edc <__sflush_r+0xfc>
 8000eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed2:	81a3      	strh	r3, [r4, #12]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000edc:	4407      	add	r7, r0
 8000ede:	eba8 0800 	sub.w	r8, r8, r0
 8000ee2:	e7e7      	b.n	8000eb4 <__sflush_r+0xd4>
 8000ee4:	dfbffffe 	.word	0xdfbffffe

08000ee8 <_fflush_r>:
 8000ee8:	b538      	push	{r3, r4, r5, lr}
 8000eea:	690b      	ldr	r3, [r1, #16]
 8000eec:	4605      	mov	r5, r0
 8000eee:	460c      	mov	r4, r1
 8000ef0:	b913      	cbnz	r3, 8000ef8 <_fflush_r+0x10>
 8000ef2:	2500      	movs	r5, #0
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}
 8000ef8:	b118      	cbz	r0, 8000f02 <_fflush_r+0x1a>
 8000efa:	6a03      	ldr	r3, [r0, #32]
 8000efc:	b90b      	cbnz	r3, 8000f02 <_fflush_r+0x1a>
 8000efe:	f7ff fc8f 	bl	8000820 <__sinit>
 8000f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f3      	beq.n	8000ef2 <_fflush_r+0xa>
 8000f0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000f0c:	07d0      	lsls	r0, r2, #31
 8000f0e:	d404      	bmi.n	8000f1a <_fflush_r+0x32>
 8000f10:	0599      	lsls	r1, r3, #22
 8000f12:	d402      	bmi.n	8000f1a <_fflush_r+0x32>
 8000f14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f16:	f7ff fe68 	bl	8000bea <__retarget_lock_acquire_recursive>
 8000f1a:	4628      	mov	r0, r5
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	f7ff ff5f 	bl	8000de0 <__sflush_r>
 8000f22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000f24:	07da      	lsls	r2, r3, #31
 8000f26:	4605      	mov	r5, r0
 8000f28:	d4e4      	bmi.n	8000ef4 <_fflush_r+0xc>
 8000f2a:	89a3      	ldrh	r3, [r4, #12]
 8000f2c:	059b      	lsls	r3, r3, #22
 8000f2e:	d4e1      	bmi.n	8000ef4 <_fflush_r+0xc>
 8000f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f32:	f7ff fe5b 	bl	8000bec <__retarget_lock_release_recursive>
 8000f36:	e7dd      	b.n	8000ef4 <_fflush_r+0xc>

08000f38 <__swhatbuf_r>:
 8000f38:	b570      	push	{r4, r5, r6, lr}
 8000f3a:	460c      	mov	r4, r1
 8000f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f40:	2900      	cmp	r1, #0
 8000f42:	b096      	sub	sp, #88	@ 0x58
 8000f44:	4615      	mov	r5, r2
 8000f46:	461e      	mov	r6, r3
 8000f48:	da0d      	bge.n	8000f66 <__swhatbuf_r+0x2e>
 8000f4a:	89a3      	ldrh	r3, [r4, #12]
 8000f4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000f50:	f04f 0100 	mov.w	r1, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2340      	movne	r3, #64	@ 0x40
 8000f58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	6031      	str	r1, [r6, #0]
 8000f60:	602b      	str	r3, [r5, #0]
 8000f62:	b016      	add	sp, #88	@ 0x58
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
 8000f66:	466a      	mov	r2, sp
 8000f68:	f000 f848 	bl	8000ffc <_fstat_r>
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	dbec      	blt.n	8000f4a <__swhatbuf_r+0x12>
 8000f70:	9901      	ldr	r1, [sp, #4]
 8000f72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000f76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000f7a:	4259      	negs	r1, r3
 8000f7c:	4159      	adcs	r1, r3
 8000f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f82:	e7eb      	b.n	8000f5c <__swhatbuf_r+0x24>

08000f84 <__smakebuf_r>:
 8000f84:	898b      	ldrh	r3, [r1, #12]
 8000f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f88:	079d      	lsls	r5, r3, #30
 8000f8a:	4606      	mov	r6, r0
 8000f8c:	460c      	mov	r4, r1
 8000f8e:	d507      	bpl.n	8000fa0 <__smakebuf_r+0x1c>
 8000f90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000f94:	6023      	str	r3, [r4, #0]
 8000f96:	6123      	str	r3, [r4, #16]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	6163      	str	r3, [r4, #20]
 8000f9c:	b003      	add	sp, #12
 8000f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa0:	ab01      	add	r3, sp, #4
 8000fa2:	466a      	mov	r2, sp
 8000fa4:	f7ff ffc8 	bl	8000f38 <__swhatbuf_r>
 8000fa8:	9f00      	ldr	r7, [sp, #0]
 8000faa:	4605      	mov	r5, r0
 8000fac:	4639      	mov	r1, r7
 8000fae:	4630      	mov	r0, r6
 8000fb0:	f7ff fe8a 	bl	8000cc8 <_malloc_r>
 8000fb4:	b948      	cbnz	r0, 8000fca <__smakebuf_r+0x46>
 8000fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fba:	059a      	lsls	r2, r3, #22
 8000fbc:	d4ee      	bmi.n	8000f9c <__smakebuf_r+0x18>
 8000fbe:	f023 0303 	bic.w	r3, r3, #3
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	81a3      	strh	r3, [r4, #12]
 8000fc8:	e7e2      	b.n	8000f90 <__smakebuf_r+0xc>
 8000fca:	89a3      	ldrh	r3, [r4, #12]
 8000fcc:	6020      	str	r0, [r4, #0]
 8000fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd2:	81a3      	strh	r3, [r4, #12]
 8000fd4:	9b01      	ldr	r3, [sp, #4]
 8000fd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000fda:	b15b      	cbz	r3, 8000ff4 <__smakebuf_r+0x70>
 8000fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	f000 f81d 	bl	8001020 <_isatty_r>
 8000fe6:	b128      	cbz	r0, 8000ff4 <__smakebuf_r+0x70>
 8000fe8:	89a3      	ldrh	r3, [r4, #12]
 8000fea:	f023 0303 	bic.w	r3, r3, #3
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	81a3      	strh	r3, [r4, #12]
 8000ff4:	89a3      	ldrh	r3, [r4, #12]
 8000ff6:	431d      	orrs	r5, r3
 8000ff8:	81a5      	strh	r5, [r4, #12]
 8000ffa:	e7cf      	b.n	8000f9c <__smakebuf_r+0x18>

08000ffc <_fstat_r>:
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4d07      	ldr	r5, [pc, #28]	@ (800101c <_fstat_r+0x20>)
 8001000:	2300      	movs	r3, #0
 8001002:	4604      	mov	r4, r0
 8001004:	4608      	mov	r0, r1
 8001006:	4611      	mov	r1, r2
 8001008:	602b      	str	r3, [r5, #0]
 800100a:	f7ff faf4 	bl	80005f6 <_fstat>
 800100e:	1c43      	adds	r3, r0, #1
 8001010:	d102      	bne.n	8001018 <_fstat_r+0x1c>
 8001012:	682b      	ldr	r3, [r5, #0]
 8001014:	b103      	cbz	r3, 8001018 <_fstat_r+0x1c>
 8001016:	6023      	str	r3, [r4, #0]
 8001018:	bd38      	pop	{r3, r4, r5, pc}
 800101a:	bf00      	nop
 800101c:	200001b8 	.word	0x200001b8

08001020 <_isatty_r>:
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	4d06      	ldr	r5, [pc, #24]	@ (800103c <_isatty_r+0x1c>)
 8001024:	2300      	movs	r3, #0
 8001026:	4604      	mov	r4, r0
 8001028:	4608      	mov	r0, r1
 800102a:	602b      	str	r3, [r5, #0]
 800102c:	f7ff faf3 	bl	8000616 <_isatty>
 8001030:	1c43      	adds	r3, r0, #1
 8001032:	d102      	bne.n	800103a <_isatty_r+0x1a>
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	b103      	cbz	r3, 800103a <_isatty_r+0x1a>
 8001038:	6023      	str	r3, [r4, #0]
 800103a:	bd38      	pop	{r3, r4, r5, pc}
 800103c:	200001b8 	.word	0x200001b8

08001040 <_sbrk_r>:
 8001040:	b538      	push	{r3, r4, r5, lr}
 8001042:	4d06      	ldr	r5, [pc, #24]	@ (800105c <_sbrk_r+0x1c>)
 8001044:	2300      	movs	r3, #0
 8001046:	4604      	mov	r4, r0
 8001048:	4608      	mov	r0, r1
 800104a:	602b      	str	r3, [r5, #0]
 800104c:	f7ff fafc 	bl	8000648 <_sbrk>
 8001050:	1c43      	adds	r3, r0, #1
 8001052:	d102      	bne.n	800105a <_sbrk_r+0x1a>
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	b103      	cbz	r3, 800105a <_sbrk_r+0x1a>
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	200001b8 	.word	0x200001b8

08001060 <_init>:
 8001060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001062:	bf00      	nop
 8001064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001066:	bc08      	pop	{r3}
 8001068:	469e      	mov	lr, r3
 800106a:	4770      	bx	lr

0800106c <_fini>:
 800106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106e:	bf00      	nop
 8001070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001072:	bc08      	pop	{r3}
 8001074:	469e      	mov	lr, r3
 8001076:	4770      	bx	lr
