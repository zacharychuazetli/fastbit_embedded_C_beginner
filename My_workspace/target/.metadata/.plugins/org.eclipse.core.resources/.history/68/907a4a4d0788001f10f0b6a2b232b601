/**
  ******************************************************************************
  * @file    main.c
  * @author  Auto-generated by STM32CubeIDE
  * @version V1.0
  * @brief   Default main function.
  ******************************************************************************
*/

#include<stdio.h>
#include "main.h"

void delay(void)
{
	for(uint32_t i =0 ; i < 300000 ; i++);

}

int main(void)
{
	//peripheral register addresses
	/*uint32_t volatile *const pGPIODModeReg  =  (uint32_t*)(0x40020C00);
	uint32_t volatile *const pInPutDataReg  =  (uint32_t*)(0x40020C00+0x10);
	uint32_t volatile *const pOutPutDataReg =  (uint32_t*)(0x40020C00+0x14);
	uint32_t volatile *const pClockCtrlReg  =  (uint32_t*)(0x40023800+0x30);
	uint32_t volatile *const pPullupDownReg =  (uint32_t*)(0x40020C00 + 0x0C); */

	RCC_AHB1ENR_t volatile *const pClockCtrlReg   = (RCC_AHB1ENR_t*)(0x40023800 + 0x30);
	GPIOx_MODER_t volatile *const pGPIODModeReg  =  (GPIOx_MODER_t*)(0x40020C00);
	GPIOx_ODR_t volatile *const pOutPutDataReg =  (GPIOx_ODR_t*)(0x40020C00 + 0x14);
	GPIOx_IDR_t volatile *const pInPutDataReg  =  (GPIOx_IDR_t*)(0x40020C00 + 0x10);
	GPIOx_PUPDR	volatile *const pPullUpDownReg  =  (GPIOx_PUPDR*)(0x40020C00 + 0x0C);

	//1.Enable the peripheral clock of GPIOD peripheral
	pClockCtrlReg -> gpiod_en = 1;

    // 2.configure PD0,PD1,PD2,PD3 as output (rows)
	// clear
	pGPIODModeReg -> pin_0 = 1;
	pGPIODModeReg -> pin_1 = 1;
	pGPIODModeReg -> pin_2 = 1;
	pGPIODModeReg -> pin_3 = 1;

	// 3. configure PD8 , PD9, PD10, PD11 as input (columns)
	pGPIODModeReg -> pin_8 = 0;
	pGPIODModeReg -> pin_9 = 0;
	pGPIODModeReg -> pin_10 = 0;
	pGPIODModeReg -> pin_11 = 0;

	// 4.Enable internal pull-up resistors for PD8 PD9 PD10 PD11
    pPullUpDownReg -> pin_8 = 1;
    pPullUpDownReg -> pin_9 = 1;
    pPullUpDownReg -> pin_10 = 1;
    pPullUpDownReg -> pin_11 = 1;

while(1)
{
	pOutPutDataReg -> pin_0 = 0;
    pOutPutDataReg -> pin_1 = 1;
    pOutPutDataReg -> pin_2 = 1;
    pOutPutDataReg -> pin_3 = 1;

    //scan the columns
    //check C1(PD8) low or high
    if(!(pInPutDataReg -> pin_8))
    {
    	//key is pressed
    	delay();
    	printf("1\n");
    }

    //check C2(PD9) low or high
    if(!(pInPutDataReg -> pin_9))
    {
    	//key is pressed
    	delay();
    	printf("2\n");
    }

    //check C3(PD10) low or high
    if(!(pInPutDataReg -> pin_10))
    {
    	//key is pressed
    	delay();
    	printf("3\n");
    }

    //check C4(PD11) low or high
    if(!(pInPutDataReg -> pin_11))
    {
    	//key is pressed
    	delay();
    	printf("A\n");
    }


    pOutPutDataReg -> pin_0 = 1;
	pOutPutDataReg -> pin_1 = 0;
	pOutPutDataReg -> pin_2 = 1;
	pOutPutDataReg -> pin_3 = 1;

	//scan the columns
	//check C1(PD8) low or high
	if(!(pInPutDataReg -> pin_8))
	{
		//key is pressed
		delay();
		printf("1\n");
	}

	//check C2(PD9) low or high
	if(!(pInPutDataReg -> pin_9))
	{
		//key is pressed
		delay();
		printf("2\n");
	}

	//check C3(PD10) low or high
	if(!(pInPutDataReg -> pin_10))
	{
		//key is pressed
		delay();
		printf("3\n");
	}

	//check C4(PD11) low or high
	if(!(pInPutDataReg -> pin_11))
	{
		//key is pressed
		delay();
		printf("A\n");
	}

    //make all rows HIGH
     *pOutPutDataReg |= 0x0f;
    //make R3 LOW(PD2)
    *pOutPutDataReg &= ~( 1 << 2);

    //scan the columns
    //check C1(PD8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
    	//key is pressed
    	delay();
    	printf("7\n");
    }

    //check C2(PD9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
    	//key is pressed
    	delay();
    	printf("8\n");
    }

    //check C3(PD10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
    	//key is pressed
    	delay();
    	printf("9\n");
    }

    //check C4(PD11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
    	//key is pressed
    	delay();
    	printf("C\n");
    }

    //make all rows HIGH
     *pOutPutDataReg |= 0x0f;
    //make R4 LOW(PD2)
    *pOutPutDataReg &= ~( 1 << 3);

    //scan the columns
    //check C1(PD8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
    	//key is pressed
    	delay();
    	printf("*\n");
    }

    //check C2(PD9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
    	//key is pressed
    	delay();
    	printf("0\n");
    }

    //check C3(PD10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
    	//key is pressed
    	delay();
    	printf("#\n");
    }

    //check C4(PD11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
    	//key is pressed
    	delay();
    	printf("D\n");
    }

}//while end

}
