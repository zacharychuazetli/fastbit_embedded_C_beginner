/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

int main(void)
{
	uint32_t volatile *pClkCtrlReg = (uint32_t*)0x40023830;
	uint32_t volatile *pPortDModeReg = (uint32_t*)0x40020C00;
	uint32_t volatile *pPortDOutReg = (uint32_t*)0x40020C14;

	uint32_t *pPortAModeReg = (uint32_t*)0x40020000;
	uint32_t *pPortAInReg = (uint32_t*)0x40020010;

	//1. enable the clock for GPIOD, and GPIOA peripheral in the AHB1ENR (same for both, same bus)
	//GPIO D
	*pClkCtrlReg |= (1 << 3);
	//GPIO A
	*pClkCtrlReg |= (1 << 0);

	//2. configure the mode of the IO pin PD12 as output
	//a. clear the 24th and 25th bit positions (clear)
	*pPortDModeReg &= ~(3 << 24);
	//b. make 24th bit position as 1 (set)
	*pPortDModeReg |= (1 << 24);

	//2. configure the mode of the IO pin PA0 as input (GPIOA Mode Register)
	*pPortAModeReg &= ~(3 << 0);

	while(1)
	{
		//3. read the pin status of the pin PA0 (GPIO A input data register)
		// when do this will get 32 bits of data, but just want one bit, the first one
		uint8_t pinStatus = (uint8_t)(*pPortAInReg & 0x1);

		if(pinStatus)
		{
			//turn on the LED
			*pPortDOutReg |= (1 << 12);
		}
		else
		{
			//turn off the LED
			*pPortDOutReg &= ~(1 << 12);
		}
	}
}
