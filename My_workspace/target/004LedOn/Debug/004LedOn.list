
004LedOn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000150  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d8  080002e0  000012e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d8  080002d8  000012e0  2**0
                  CONTENTS
  4 .ARM          00000000  080002d8  080002d8  000012e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d8  080002e0  000012e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d8  080002d8  000012d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002dc  080002dc  000012dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000012e0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000112  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000097  00000000  00000000  00001422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000014c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002c  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f70  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004ac  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c40  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006590  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  000065d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0000662c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080002c0 	.word	0x080002c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080002c0 	.word	0x080002c0

080001c8 <main>:
 */

#include <stdint.h>

int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
	uint32_t *pClkCtrlReg = (uint32_t*)0x40023830;
 80001ce:	4b12      	ldr	r3, [pc, #72]	@ (8000218 <main+0x50>)
 80001d0:	60fb      	str	r3, [r7, #12]
	uint32_t *pPortDModeReg = (uint32_t*)0x40020C00;
 80001d2:	4b12      	ldr	r3, [pc, #72]	@ (800021c <main+0x54>)
 80001d4:	60bb      	str	r3, [r7, #8]
	uint32_t *pPortDOutReg = (uint32_t*)0x40020C14;
 80001d6:	4b12      	ldr	r3, [pc, #72]	@ (8000220 <main+0x58>)
 80001d8:	607b      	str	r3, [r7, #4]

	//1. enable the clock for GPIOD peripheral in the AHB1ENR
	uint32_t temp = *pClkCtrlReg; //read
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	603b      	str	r3, [r7, #0]
	temp = temp | 0x08; //modify
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	f043 0308 	orr.w	r3, r3, #8
 80001e6:	603b      	str	r3, [r7, #0]
	*pClkCtrlReg = temp; //write back
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	683a      	ldr	r2, [r7, #0]
 80001ec:	601a      	str	r2, [r3, #0]
	// *pClkCtrlReg |= (1 << 3);


	//2. configure the mode of the IO pin as output
	//a. clear the 24th and 25th bit positions (clear)
	*pPortDModeReg &= 0xFCFFFFFF;
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	601a      	str	r2, [r3, #0]
	//b. make 24th bit position as 1 (set)
	*pPortDModeReg |= 0x01000000;
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	601a      	str	r2, [r3, #0]
	// its like pushing 11 to the 24 and 25 bit position, and 11 is just 3
	// then make 24 bit as 1 (set)
	// *pPortDModeReg |= (1 << 24);

	//3. set 12th bit of the output data register to make I/O pin-12 high
	*pPortDOutReg |= 0x1000;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	601a      	str	r2, [r3, #0]
	// using bit shift method
	// set 12 bit
	// *pPortDOutReg |= (1 << 12);

	while(1);
 8000212:	bf00      	nop
 8000214:	e7fd      	b.n	8000212 <main+0x4a>
 8000216:	bf00      	nop
 8000218:	40023830 	.word	0x40023830
 800021c:	40020c00 	.word	0x40020c00
 8000220:	40020c14 	.word	0x40020c14

08000224 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000224:	480d      	ldr	r0, [pc, #52]	@ (800025c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000226:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000228:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800022c:	480c      	ldr	r0, [pc, #48]	@ (8000260 <LoopForever+0x6>)
  ldr r1, =_edata
 800022e:	490d      	ldr	r1, [pc, #52]	@ (8000264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000230:	4a0d      	ldr	r2, [pc, #52]	@ (8000268 <LoopForever+0xe>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000234:	e002      	b.n	800023c <LoopCopyDataInit>

08000236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800023a:	3304      	adds	r3, #4

0800023c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800023c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000240:	d3f9      	bcc.n	8000236 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000242:	4a0a      	ldr	r2, [pc, #40]	@ (800026c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000244:	4c0a      	ldr	r4, [pc, #40]	@ (8000270 <LoopForever+0x16>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000248:	e001      	b.n	800024e <LoopFillZerobss>

0800024a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800024a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800024c:	3204      	adds	r2, #4

0800024e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000250:	d3fb      	bcc.n	800024a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000252:	f000 f811 	bl	8000278 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000256:	f7ff ffb7 	bl	80001c8 <main>

0800025a <LoopForever>:

LoopForever:
  b LoopForever
 800025a:	e7fe      	b.n	800025a <LoopForever>
  ldr   r0, =_estack
 800025c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000264:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000268:	080002e0 	.word	0x080002e0
  ldr r2, =_sbss
 800026c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000270:	2000001c 	.word	0x2000001c

08000274 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000274:	e7fe      	b.n	8000274 <ADC_IRQHandler>
	...

08000278 <__libc_init_array>:
 8000278:	b570      	push	{r4, r5, r6, lr}
 800027a:	4d0d      	ldr	r5, [pc, #52]	@ (80002b0 <__libc_init_array+0x38>)
 800027c:	4c0d      	ldr	r4, [pc, #52]	@ (80002b4 <__libc_init_array+0x3c>)
 800027e:	1b64      	subs	r4, r4, r5
 8000280:	10a4      	asrs	r4, r4, #2
 8000282:	2600      	movs	r6, #0
 8000284:	42a6      	cmp	r6, r4
 8000286:	d109      	bne.n	800029c <__libc_init_array+0x24>
 8000288:	4d0b      	ldr	r5, [pc, #44]	@ (80002b8 <__libc_init_array+0x40>)
 800028a:	4c0c      	ldr	r4, [pc, #48]	@ (80002bc <__libc_init_array+0x44>)
 800028c:	f000 f818 	bl	80002c0 <_init>
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	10a4      	asrs	r4, r4, #2
 8000294:	2600      	movs	r6, #0
 8000296:	42a6      	cmp	r6, r4
 8000298:	d105      	bne.n	80002a6 <__libc_init_array+0x2e>
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a0:	4798      	blx	r3
 80002a2:	3601      	adds	r6, #1
 80002a4:	e7ee      	b.n	8000284 <__libc_init_array+0xc>
 80002a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002aa:	4798      	blx	r3
 80002ac:	3601      	adds	r6, #1
 80002ae:	e7f2      	b.n	8000296 <__libc_init_array+0x1e>
 80002b0:	080002d8 	.word	0x080002d8
 80002b4:	080002d8 	.word	0x080002d8
 80002b8:	080002d8 	.word	0x080002d8
 80002bc:	080002dc 	.word	0x080002dc

080002c0 <_init>:
 80002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c2:	bf00      	nop
 80002c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002c6:	bc08      	pop	{r3}
 80002c8:	469e      	mov	lr, r3
 80002ca:	4770      	bx	lr

080002cc <_fini>:
 80002cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ce:	bf00      	nop
 80002d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d2:	bc08      	pop	{r3}
 80002d4:	469e      	mov	lr, r3
 80002d6:	4770      	bx	lr
