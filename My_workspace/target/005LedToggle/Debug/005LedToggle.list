
005LedToggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000017c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000304  0800030c  0000130c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000304  08000304  0000130c  2**0
                  CONTENTS
  4 .ARM          00000000  08000304  08000304  0000130c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000304  0800030c  0000130c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000304  08000304  00001304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000308  08000308  00001308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000130c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000130c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000012f  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000bf  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00001530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f70  00000000  00000000  000015a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004d3  00000000  00000000  00002515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c3f  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006627  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0000666c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000066c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080002ec 	.word	0x080002ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080002ec 	.word	0x080002ec

080001c8 <main>:
 */

#include <stdint.h>

int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
	uint32_t *pClkCtrlReg = (uint32_t*)0x40023830;
 80001ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000240 <main+0x78>)
 80001d0:	60fb      	str	r3, [r7, #12]
	uint32_t *pPortDModeReg = (uint32_t*)0x40020C00;
 80001d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000244 <main+0x7c>)
 80001d4:	60bb      	str	r3, [r7, #8]
	uint32_t *pPortDOutReg = (uint32_t*)0x40020C14;
 80001d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000248 <main+0x80>)
 80001d8:	607b      	str	r3, [r7, #4]

	//1. enable the clock for GPIOD peripheral in the AHB1ENR
	*pClkCtrlReg |= (1 << 3);
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f043 0208 	orr.w	r2, r3, #8
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	601a      	str	r2, [r3, #0]

	//2. configure the mode of the IO pin as output
	//a. clear the 24th and 25th bit positions (clear)
	*pPortDModeReg &= ~(3 << 24);
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	601a      	str	r2, [r3, #0]
	//b. make 24th bit position as 1 (set)
	*pPortDModeReg |= (1 << 24);
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	601a      	str	r2, [r3, #0]

	while(1)
	{
		//3. set 12th bit of the output data register to make I/O pin-12 high
		*pPortDOutReg |= (1 << 12);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
		/* The main reason stepping over delays takes longer in debugging is due to
		   the overhead introduced by the debugger itself. The debugger monitors execution,
		   checks breakpoints, and updates debugging information, which slows down the code's
		   execution compared to running it without debugging.
		 */
		for(uint32_t i=0; i < 300000 ; i++);
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]
 800020e:	e002      	b.n	8000216 <main+0x4e>
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	3301      	adds	r3, #1
 8000214:	617b      	str	r3, [r7, #20]
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	4a0c      	ldr	r2, [pc, #48]	@ (800024c <main+0x84>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <main+0x48>

		// Turn Off the LEd
		*pPortDOutReg &= ~(1 << 12);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]

		for(uint32_t i=0; i < 300000 ; i++);
 800022a:	2300      	movs	r3, #0
 800022c:	613b      	str	r3, [r7, #16]
 800022e:	e002      	b.n	8000236 <main+0x6e>
 8000230:	693b      	ldr	r3, [r7, #16]
 8000232:	3301      	adds	r3, #1
 8000234:	613b      	str	r3, [r7, #16]
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	4a04      	ldr	r2, [pc, #16]	@ (800024c <main+0x84>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d9f8      	bls.n	8000230 <main+0x68>
		*pPortDOutReg |= (1 << 12);
 800023e:	e7de      	b.n	80001fe <main+0x36>
 8000240:	40023830 	.word	0x40023830
 8000244:	40020c00 	.word	0x40020c00
 8000248:	40020c14 	.word	0x40020c14
 800024c:	000493df 	.word	0x000493df

08000250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000250:	480d      	ldr	r0, [pc, #52]	@ (8000288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000252:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000254:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000258:	480c      	ldr	r0, [pc, #48]	@ (800028c <LoopForever+0x6>)
  ldr r1, =_edata
 800025a:	490d      	ldr	r1, [pc, #52]	@ (8000290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800025c:	4a0d      	ldr	r2, [pc, #52]	@ (8000294 <LoopForever+0xe>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000260:	e002      	b.n	8000268 <LoopCopyDataInit>

08000262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000266:	3304      	adds	r3, #4

08000268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800026c:	d3f9      	bcc.n	8000262 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026e:	4a0a      	ldr	r2, [pc, #40]	@ (8000298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000270:	4c0a      	ldr	r4, [pc, #40]	@ (800029c <LoopForever+0x16>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000274:	e001      	b.n	800027a <LoopFillZerobss>

08000276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000278:	3204      	adds	r2, #4

0800027a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800027c:	d3fb      	bcc.n	8000276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027e:	f000 f811 	bl	80002a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000282:	f7ff ffa1 	bl	80001c8 <main>

08000286 <LoopForever>:

LoopForever:
  b LoopForever
 8000286:	e7fe      	b.n	8000286 <LoopForever>
  ldr   r0, =_estack
 8000288:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800028c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000290:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000294:	0800030c 	.word	0x0800030c
  ldr r2, =_sbss
 8000298:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800029c:	2000001c 	.word	0x2000001c

080002a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC_IRQHandler>
	...

080002a4 <__libc_init_array>:
 80002a4:	b570      	push	{r4, r5, r6, lr}
 80002a6:	4d0d      	ldr	r5, [pc, #52]	@ (80002dc <__libc_init_array+0x38>)
 80002a8:	4c0d      	ldr	r4, [pc, #52]	@ (80002e0 <__libc_init_array+0x3c>)
 80002aa:	1b64      	subs	r4, r4, r5
 80002ac:	10a4      	asrs	r4, r4, #2
 80002ae:	2600      	movs	r6, #0
 80002b0:	42a6      	cmp	r6, r4
 80002b2:	d109      	bne.n	80002c8 <__libc_init_array+0x24>
 80002b4:	4d0b      	ldr	r5, [pc, #44]	@ (80002e4 <__libc_init_array+0x40>)
 80002b6:	4c0c      	ldr	r4, [pc, #48]	@ (80002e8 <__libc_init_array+0x44>)
 80002b8:	f000 f818 	bl	80002ec <_init>
 80002bc:	1b64      	subs	r4, r4, r5
 80002be:	10a4      	asrs	r4, r4, #2
 80002c0:	2600      	movs	r6, #0
 80002c2:	42a6      	cmp	r6, r4
 80002c4:	d105      	bne.n	80002d2 <__libc_init_array+0x2e>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002cc:	4798      	blx	r3
 80002ce:	3601      	adds	r6, #1
 80002d0:	e7ee      	b.n	80002b0 <__libc_init_array+0xc>
 80002d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d6:	4798      	blx	r3
 80002d8:	3601      	adds	r6, #1
 80002da:	e7f2      	b.n	80002c2 <__libc_init_array+0x1e>
 80002dc:	08000304 	.word	0x08000304
 80002e0:	08000304 	.word	0x08000304
 80002e4:	08000304 	.word	0x08000304
 80002e8:	08000308 	.word	0x08000308

080002ec <_init>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr

080002f8 <_fini>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr
